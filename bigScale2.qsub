#!/bin/bash -l

#$ -S /bin/bash
#$ -j y
#$ -P wax-dk
#$ -m be
#$ -M dengel@bu.edu
#$ -e ./logs/
#$ -o ./logs/
#$ -pe omp 8
#$ -l mem_per_core=8G
#$ -l h_rt=240:00:00

# Function to perform backup of dozer_par.log
perform_backup() {
    logfile="bigscale2_DEv3.log"
    backupfile="$logfile.bk"

    if [ -e "$logfile" ]; then
        if [ -e "$backupfile" ]; then
            num=$(ls -l "$logfile".bk* 2>/dev/null | wc -l)
            num=$((num + 1))
            newbackup="$logfile.bk$num"
        else
            newbackup="$backupfile"
        fi
        mv "$logfile" "$newbackup"
    fi
}

# Backup the current dozer_par.log (if exists) before running the job
perform_backup

echo "=============================================="
echo "Starting on       : $(date)"
echo "Running on Node   : $(hostname)"
echo "Current job ID    : $JOB_ID"
echo "Current job name  : $JOB_NAME"
echo "Task index number : $TASK_ID"
echo "==============================================="



module load R/4.4.0

p1=$1
p2=$2
p3=$3
p4=$4
p5=$5
p6=$6
run=$7
speed=$8
output_file=~/Bigscale_pipe/output_paths_$(date +'%m-%d-%Y').txt

# Define the current date in MM-DD-YYYY format
current_date=$(date +'%m-%d-%Y')

# Find and delete .txt files that begin with "output_paths_" and have a date that doesn't match the current date
for file in ~/Bigscale_pipe/output_paths_*.txt; do
  # Extract the date portion from the filename
  file_date=$(basename "$file" | sed -n 's/^output_paths_\([0-9]\{2\}-[0-9]\{2\}-[0-9]\{4\}\).txt$/\1/p')

  # Check if the date exists and does not match the current date
  if [[ -n "$file_date" && "$file_date" != "$current_date" ]]; then
    echo "Deleting outdated file: $file"
    rm "$file"
  fi
done


# Create a new output_paths.txt file
touch "$output_file"

# Define the output directory
out="/projectnb/wax-dk/david/BS2_$(date +'%m-%d-%Y')"

# Append the output directory path to output_paths.txt
echo "$out" >> "$output_file"

# Create the output directory
mkdir -p "$out"


if [ $? -eq 0 ]; then
  echo "Folder '$out' created successfully."

# Copy config.tsv to the newly created folder
  cp ./config.tsv "$out/"
  
  # Check if the copy was successful
  if [ $? -eq 0 ]; then
    echo "config.tsv copied to '$out' successfully."
  else
    echo "Failed to copy config.tsv to '$out'."
    exit 1  # Exit if copying failed
  fi
elif [ -d "$out" ]; then
  echo "Directory '$out' already exists."
# Copy config.tsv to the existing folder
  cp ./config.tsv "$out/"

  # Check if the copy was successful
  if [ $? -eq 0]; then
    echo "config.tsv copied '$out' successfully."
  else
    echo "Failed to copy config.tsv to '$out'."
    exit 1
  fi
else
  echo "Failed to create folder '$out'."
  exit 1  # Terminate the script with an error code
fi

Rscript Bigscale_pipe_v2.R $p1 $p2 $p3 $p4 $p5 $p6 $out $run $speed

# Wait for both background processes to complete



